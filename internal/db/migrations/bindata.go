// Code generated by go-bindata.
// sources:
// 000001_create_table.down.sql
// 000001_create_table.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_create_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\xc8\x4c\x53\x48\xad\xc8\x2c\x2e\x29\x56\x28\x2d\x4e\x2d\x2a\x56\x48\x4e\x2c\x4e\x4e\x4c\x49\xb5\xe6\xc2\xaa\xa6\x24\x35\x31\x97\x90\x9a\x62\x62\x14\xe5\x26\x96\x24\x67\xa4\x22\x54\x01\x02\x00\x00\xff\xff\x79\x92\xee\x66\x92\x00\x00\x00")

func _000001_create_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_create_tableDownSql,
		"000001_create_table.down.sql",
	)
}

func _000001_create_tableDownSql() (*asset, error) {
	bytes, err := _000001_create_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_create_table.down.sql", size: 146, mode: os.FileMode(420), modTime: time.Unix(1606570282, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_create_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x95\x5b\x6e\xa5\x30\x0c\x86\xdf\x59\x45\x1e\x7b\xa4\xd9\x41\x17\x13\x99\x60\xc0\x9a\x5c\x8e\x6c\x73\x54\x66\xf5\x23\x20\xd0\x72\xef\xcc\x43\xf3\x84\xc8\x67\xfc\xe7\xb7\x63\x1c\x23\x28\x1a\x85\xd2\xa3\xa1\xda\xc4\xa4\x06\x3f\x48\x54\x4c\x27\xc8\x52\xbc\x15\xc6\x18\x43\x95\xf9\x5c\x25\x35\x14\x75\x7c\x1c\xf0\xd8\x79\x6f\x9e\x4c\x01\xb8\x37\xbf\xb1\xff\x35\x46\x44\x08\xb8\x44\xbc\x80\x5d\x0b\xbc\xe0\x13\xe2\x41\x74\xc1\x8e\x11\x47\xda\x6f\xbf\x92\x77\x52\x17\x95\xfb\x83\x1d\xc1\x8f\x4f\xad\x5b\xa1\x13\xa2\x14\xf0\x4f\x8a\x78\x81\x3c\xdb\xa4\xc9\x4a\x00\xef\xcf\xc4\x4d\x48\xc0\x8a\xba\x70\x89\x94\xd4\x9c\x1f\x51\x11\x82\x9d\xfd\xcd\xd6\x32\xd6\xc8\x18\x1d\xca\xb8\x2d\x6f\x54\x3d\xf2\xe1\xbe\xe2\x7b\x5a\x16\xbc\x78\xbc\x17\xc5\x45\x75\x47\xf0\xbf\xab\xab\xa4\x1e\xaf\xab\xab\xd0\x98\x9b\x06\xf8\x31\x8f\x19\x94\x62\x73\xd9\x12\x01\xd4\xb5\xe7\xc6\x8e\xdb\x28\xe6\x3b\xd6\x66\xf6\xc8\xdc\xaf\x06\x5f\xb8\x3b\xd4\xd8\x63\xad\xe7\x7a\x36\x6d\x31\x46\x30\x35\xed\x1c\x72\x1f\x41\x01\xed\x74\x88\xea\xe6\xa6\x58\x51\xe0\x1b\x6c\x51\xcc\x08\x55\x6f\x4c\x99\x92\x47\x88\x47\xd8\x24\x73\xe2\xb6\xd8\x9d\xb5\x72\xda\xb6\x87\x1e\x9f\x5b\xec\x52\x08\x5d\x24\xed\xed\x8b\x84\x4a\xf2\xc3\xa3\xe8\x90\x77\x3e\xe1\x6e\x22\x70\xaa\xc9\x63\xa6\x56\xeb\x34\x04\x59\x52\x04\xbb\x1a\x86\xeb\x1b\xb1\x0d\x19\x84\x61\x54\xfb\x44\x0e\x24\x42\x29\xde\x67\xc9\xc2\x3a\xf6\x5b\x1f\xce\xb2\xc0\x0b\x74\x7c\xbd\x5f\xab\x59\x3a\x71\xf3\xfd\xbb\xe5\xea\xc1\xeb\x6f\x7c\xaf\x05\x69\x2f\xb9\xe1\xd7\x60\x7d\x6a\x52\x5d\x6f\xb9\x3b\xaf\x8f\xcb\x93\xe7\x00\x82\x3f\x2a\xc6\x36\x7d\x6e\x17\xeb\x3c\x44\xbb\x6e\xb3\x15\xb7\xbb\x44\xff\x28\xd3\xd6\x1e\x1a\xd9\xc9\xf4\xc9\xd9\xfc\x7f\xb3\x2e\x55\xb8\x4f\x5f\x3c\xde\xff\x06\x00\x00\xff\xff\xc2\x52\xef\xd9\xba\x07\x00\x00")

func _000001_create_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_create_tableUpSql,
		"000001_create_table.up.sql",
	)
}

func _000001_create_tableUpSql() (*asset, error) {
	bytes, err := _000001_create_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_create_table.up.sql", size: 1978, mode: os.FileMode(420), modTime: time.Unix(1606570282, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_create_table.down.sql": _000001_create_tableDownSql,
	"000001_create_table.up.sql": _000001_create_tableUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"000001_create_table.down.sql": &bintree{_000001_create_tableDownSql, map[string]*bintree{}},
	"000001_create_table.up.sql": &bintree{_000001_create_tableUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

